{"version":3,"file":"static/js/707.27159e12.chunk.js","mappings":"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","sources":["component/section/OverviewInfo.jsx","constants/config-skills.js","component/section/SkillCardList.jsx","component/layout/Overview.jsx","utility/custom-motion.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import { motion } from 'framer-motion';\nimport {customTailwind} from \"../../constants/custom-tailwind\";\nimport { fadeIn, textVariant } from \"../../utility/custom-motion\";\nimport {IntroductionOverView} from \"../../constants/config-web-paragraph\";\nimport { useInView } from 'react-intersection-observer';\n\nfunction OverviewInfo() {\n    const [ref, inView] = useInView({\n        triggerOnce: true,\n        rootMargin: \"-100px 0px\",\n    });\n    return (\n        <>\n            <motion.div\n                ref={ref}\n                className={`pt-10 mt-14`} variants={textVariant(0)}\n                initial=\"hidden\"\n                animate={inView ? \"show\" : \"hidden\"}>\n                <h2 className={customTailwind.sectionHeadText + \" mt-10 sm:mt-5\"}>Overview.</h2>\n            </motion.div>\n\n            <motion.p\n                ref={ref}\n                variants={fadeIn(\"\", \"\", 0.3, 4)}\n                initial=\"hidden\"\n                animate={inView ? \"show\" : \"hidden\"}\n                className='mt-4 text-[#C0C0C0] text-[17px] max-w-3xl leading-[30px] '\n            >\n                {IntroductionOverView.paragraph}\n            </motion.p>\n        </>\n    );\n}\n\nexport default OverviewInfo;\n","export const skills = [\n    {\n        title: \"javascript\",\n        logoURL: \"/techIcon/javascript.png\",\n    },\n    {\n        title: \"React Native Developer\",\n        logoURL: \"/techIcon/css.png\",\n    },\n    {\n        title: \"Backend Developer\",\n        logoURL: \"/techIcon/html.png\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/git.png\",\n    },\n    {\n        title: \"Web Developer\",\n        logoURL: \"/techIcon/nodejs.png\",\n    },\n    {\n        title: \"React Native Developer\",\n        logoURL: \"/techIcon/reactjs.png\",\n    },\n    {\n        title: \"Backend Developer\",\n        logoURL: \"/techIcon/tailwind.png\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/threejs.svg\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/typescript.png\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/aws.png\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/java.png\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/python.png\",\n    },\n    {\n        title: \"Content Creator\",\n        logoURL: \"/techIcon/mysql.png\",\n    },\n]\n","import { motion } from 'framer-motion';\nimport { skillCardVariants } from '../../utility/custom-motion';\nimport { skills } from '../../constants/config-skills';\nimport { useInView } from 'react-intersection-observer';\n\n\nconst SkillCard = ({ skill, custom }) => {\n    const [ref, inView] = useInView({\n        triggerOnce: true,\n        rootMargin: \"-100px 0px\",\n    });\n    return (\n        <motion.div whileHover={{scale: 1.05}}>\n            <motion.div\n                ref={ref}\n                className=\"bg-white shadow-lg overflow-hidden relative my-4 sm:my-6 w-[80px] h-[80px] sm:w-[100px] sm:h-[100px] rounded-full justify-center\"\n                variants={skillCardVariants}\n                initial=\"hidden\"\n                animate={inView ? \"visible\" : \"hidden\"}\n                custom={custom}\n            >\n                <motion.div/>\n                <img src={process.env.PUBLIC_URL + skill.logoURL} alt={`${skill.title} logo`}\n                     className=\"w-[70px] h-[70px] sm:w-[90px] sm:h-[90px] absolute top-1/2 left-1/2\"\n                     style={{ transform: \"translate(-50%, -50%)\" }}\n                />\n            </motion.div>\n        </motion.div>\n\n    );\n};\n\nfunction SkillCardList() {\n    return (\n        <div className=\"grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4 p-0 sm:p-4 mt-14\">\n            {skills.map((skill, index) => (\n                <div key={index} className=\"flex items-center justify-center\">\n                    <SkillCard skill={skill} custom={index}/>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default SkillCardList;","import OverviewInfo from \"../section/OverviewInfo\";\nimport SkillCardList from \"../section/SkillCardList\";\n\nfunction overview() {\n    return (\n        <section id=\"overview\">\n            <div className=\"gradient-transition\"></div>\n            <div className=\"layout-container\">\n                <div className=\"projects\">\n                    <OverviewInfo/>\n                    <SkillCardList/>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default overview;","export const textVariant = (delay) => {\n    return {\n        hidden: {\n            y: -50,\n            opacity: 0,\n        },\n        show: {\n            y: 0,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                duration: 1.25,\n                delay: delay,\n            },\n        },\n    };\n};\n\nexport const skillCardVariants = {\n    hidden: { scale: 0, opacity: 0 },\n    visible: (custom) => ({\n        scale: 1,\n        opacity: 1,\n        transition: { delay: custom * 0.1, type: 'spring', stiffness: 120 },\n    }),\n};\n\n\nexport const fadeIn = (direction, type, delay, duration) => {\n    return {\n        hidden: {\n            x: direction === \"left\" ? 100 : direction === \"right\" ? -100 : 0,\n            y: direction === \"up\" ? 100 : direction === \"down\" ? -100 : 0,\n            opacity: 0,\n        },\n        show: {\n            x: 0,\n            y: 0,\n            opacity: 1,\n            transition: {\n                type: type,\n                delay: delay,\n                duration: duration,\n                ease: \"easeOut\",\n            },\n        },\n    };\n};\n\nexport const zoomIn = (delay, duration) => {\n    return {\n        hidden: {\n            scale: 0,\n            opacity: 0,\n        },\n        show: {\n            scale: 1,\n            opacity: 1,\n            transition: {\n                type: \"tween\",\n                delay: delay,\n                duration: duration,\n                ease: \"easeOut\",\n            },\n        },\n    };\n};\n\nexport const slideIn = (direction, type, delay, duration) => {\n    return {\n        hidden: {\n            x: direction === \"left\" ? \"-100%\" : direction === \"right\" ? \"100%\" : 0,\n            y: direction === \"up\" ? \"100%\" : direction === \"down\" ? \"100%\" : 0,\n        },\n        show: {\n            x: 0,\n            y: 0,\n            transition: {\n                type: type,\n                delay: delay,\n                duration: duration,\n                ease: \"easeOut\",\n            },\n        },\n    };\n};\n\nexport const staggerContainer = (staggerChildren, delayChildren) => {\n    return {\n        hidden: {},\n        show: {\n            transition: {\n                staggerChildren: staggerChildren,\n                delayChildren: delayChildren || 0,\n            },\n        },\n    };\n};\n\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ref","inView","useInView","triggerOnce","rootMargin","_jsxs","_Fragment","children","_jsx","motion","div","className","variants","textVariant","initial","animate","customTailwind","sectionHeadText","p","fadeIn","IntroductionOverView","paragraph","skills","title","logoURL","SkillCard","_ref","skill","custom","whileHover","scale","skillCardVariants","src","process","alt","concat","style","transform","map","index","id","OverviewInfo","SkillCardList","delay","hidden","y","opacity","show","transition","type","duration","visible","stiffness","direction","x","ease","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}