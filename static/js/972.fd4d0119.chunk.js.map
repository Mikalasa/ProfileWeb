{"version":3,"file":"static/js/972.fd4d0119.chunk.js","mappings":"mJA4CA,QA5CA,MACIA,WAAAA,CAAYC,EAAQC,EAAGC,EAAGC,GACtBC,KAAKJ,OAASA,EACdI,KAAKH,EAAII,KAAKC,SAAWF,KAAKJ,OAAOO,YACrCH,KAAKF,EAAI,EACTE,KAAKD,MAAQA,EACbC,KAAKI,QAAUP,EACfG,KAAKK,QAAUP,EACfE,KAAKM,KAAON,KAAKJ,OAAOW,IAAM,EAC9BP,KAAKQ,GAAK,EACVR,KAAKS,GAAK,EACVT,KAAKU,GAAK,EACVV,KAAKW,GAAK,EACVX,KAAKY,MAAQ,EACbZ,KAAKa,MAAQ,EACbb,KAAKc,SAAW,EAChBd,KAAKe,SAA2B,GAAhBd,KAAKC,SAAiB,IACtCF,KAAKgB,KAAuB,GAAhBf,KAAKC,SAAiB,IACtC,CAEAe,IAAAA,GACIjB,KAAKJ,OAAOsB,QAAQC,UAAYnB,KAAKD,MACrCC,KAAKJ,OAAOsB,QAAQE,SAASpB,KAAKH,EAAGG,KAAKF,EAAGE,KAAKM,KAAMN,KAAKM,KACjE,CAEAe,MAAAA,GACgC,OAAxBrB,KAAKJ,OAAO0B,MAAMzB,GAAsC,OAAxBG,KAAKJ,OAAO0B,MAAMxB,IAClDE,KAAKQ,GAAKR,KAAKJ,OAAO0B,MAAMzB,EAAIG,KAAKH,EACrCG,KAAKS,GAAKT,KAAKJ,OAAO0B,MAAMxB,EAAIE,KAAKF,EACrCE,KAAKc,SAAWd,KAAKQ,GAAKR,KAAKQ,GAAKR,KAAKS,GAAKT,KAAKS,GACnDT,KAAKY,OAASZ,KAAKJ,OAAO0B,MAAMC,OAASvB,KAAKc,SAE1Cd,KAAKc,SAAWd,KAAKJ,OAAO0B,MAAMC,QAAUvB,KAAKc,SAAW,KAC5Dd,KAAKa,MAAQZ,KAAKuB,MAAMxB,KAAKS,GAAIT,KAAKQ,IACtCR,KAAKU,IAAMV,KAAKY,MAAQX,KAAKwB,IAAIzB,KAAKa,OACtCb,KAAKW,IAAMX,KAAKY,MAAQX,KAAKyB,IAAI1B,KAAKa,SAI9Cb,KAAKH,IAAMG,KAAKU,IAAMV,KAAKe,WAAaf,KAAKI,QAAUJ,KAAKH,GAAKG,KAAKgB,KACtEhB,KAAKF,IAAME,KAAKW,IAAMX,KAAKe,WAAaf,KAAKK,QAAUL,KAAKF,GAAKE,KAAKgB,IAC1E,GCsDJ,QA7FA,MACIrB,WAAAA,CAAYuB,EAASf,EAAawB,EAAcC,EAAUC,GACtD7B,KAAKkB,QAAUA,EACflB,KAAKG,YAAcA,EACnBH,KAAK2B,aAAeA,EACpB3B,KAAK8B,MAAQ9B,KAAKG,YAAc,EAChCH,KAAK+B,MAAQ/B,KAAK2B,aAAe,EACjC3B,KAAK4B,SAAWA,EAChB5B,KAAKgC,WAA6B,IAAhBhC,KAAK4B,SACvB5B,KAAKiC,aAAkC,GAAnBjC,KAAKG,YACzBH,KAAKkC,eAAiB,EAEtBlC,KAAKmC,UAAY,GACjBnC,KAAKO,IAAMsB,EACX7B,KAAKsB,MAAQ,CACTC,OAAQ,IACR1B,EAAG,KACHC,EAAG,KAEX,CAEAsC,QAAAA,CAASC,GACL,MAAMC,EAAWtC,KAAKkB,QAAQqB,qBAAqB,EAAG,EAAGvC,KAAKG,YAAaH,KAAK2B,cAChFW,EAASE,aAAa,GAAK,OAC3BF,EAASE,aAAa,GAAK,WAC3BF,EAASE,aAAa,GAAK,UAC3BxC,KAAKkB,QAAQC,UAAYmB,EACzBtC,KAAKkB,QAAQuB,UAAY,SACzBzC,KAAKkB,QAAQwB,aAAe,SAC5B1C,KAAKkB,QAAQyB,UAAY,EACzB3C,KAAKkB,QAAQ0B,YAAc,SAC3B5C,KAAKkB,QAAQ2B,KAAO7C,KAAK4B,SAAW,eAEpC,IAAIkB,EAAa,GACbC,EAAQV,EAAKW,MAAM,KACnBC,EAAc,EACdC,EAAO,GAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CACnC,IAAIE,EAAWH,EAAOH,EAAMI,GAAK,IAC7BnD,KAAKkB,QAAQoC,YAAYD,GAAUE,MAAQvD,KAAKiC,cAChDiB,EAAOH,EAAMI,GAAK,IAClBF,KAEAC,EAAOG,EAEXP,EAAWG,GAAeC,CAC9B,CAEA,IAAIM,EAAaxD,KAAKgC,WAAaiB,EACnCjD,KAAK+B,MAAQ/B,KAAK2B,aAAe,EAAI6B,EAAa,EAAIxD,KAAKkC,eAC3DY,EAAWW,SAAQ,CAACC,EAAIC,KACpB3D,KAAKkB,QAAQ0C,SAASF,EAAI1D,KAAK8B,MAAO9B,KAAK+B,MAAQ4B,EAAQ3D,KAAKgC,WAAW,IAE/EhC,KAAK6D,oBACT,CAEAA,kBAAAA,GACI7D,KAAKmC,UAAY,GACjB,MAAM2B,EAAS9D,KAAKkB,QAAQ6C,aAAa,EAAG,EAAG/D,KAAKG,YAAaH,KAAK2B,cAAcqC,KACpFhE,KAAKkB,QAAQ+C,UAAU,EAAG,EAAGjE,KAAKG,YAAaH,KAAK2B,cAEpD,IAAK,IAAI7B,EAAI,EAAGA,EAAIE,KAAK2B,aAAc7B,GAAKE,KAAKO,IAC7C,IAAK,IAAIV,EAAI,EAAGA,EAAIG,KAAKG,YAAaN,GAAKG,KAAKO,IAAK,CACjD,MAAMoD,EAAqC,GAA5B7D,EAAIE,KAAKG,YAAcN,GAEtC,GADciE,EAAOH,EAAQ,GACjB,EAAG,CACX,MAAMO,EAAMJ,EAAOH,GACbQ,EAAQL,EAAOH,EAAQ,GACvBS,EAAON,EAAOH,EAAQ,GACtB5D,EAAK,OAAAsE,OAAUH,EAAG,KAAAG,OAAIF,EAAK,KAAAE,OAAID,EAAI,KACzCpE,KAAKmC,UAAUmC,KAAK,IAAIC,EAASvE,KAAMH,EAAGC,EAAGC,GACjD,CACJ,CAER,CAEAyE,MAAAA,GACIxE,KAAKmC,UAAUsB,SAASgB,IACpBA,EAASxD,OACTwD,EAASpD,QAAQ,GAEzB,CAEAqD,MAAAA,CAAOnB,EAAOoB,GACV3E,KAAKG,YAAcoD,EACnBvD,KAAK2B,aAAegD,EACpB3E,KAAK8B,MAAQ9B,KAAKG,YAAc,EAChCH,KAAK+B,MAAQ/B,KAAK2B,aAAe,EACjC3B,KAAKiC,aAAkC,GAAnBjC,KAAKG,WAC7B,G,aCzFJ,MAwDA,EAxDqByE,IAAgC,IAA/B,KAAEvC,EAAI,SAAET,EAAQ,OAAEC,GAAO+C,EAC3C,MAAMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAYD,EAAAA,EAAAA,QAAO,MACnBE,GAAmBF,EAAAA,EAAAA,QAAO,MAkDhC,OAhDAG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAASL,EAAUM,QACnBC,EAAMF,EAAOG,WAAW,KAAM,CAAEC,oBAAoB,IAC1DJ,EAAO3B,MAAQgC,OAAOC,WACtBN,EAAOP,OAASY,OAAOE,YAGvBV,EAAUI,QAAU,IAAIO,EAAON,EAAKF,EAAO3B,MAAO2B,EAAOP,OAAQ/C,EAAUC,GAC3EkD,EAAUI,QAAQ/C,SAASC,GAE3B,MAAMsD,EAAmBC,IACrB,MAAMC,EAAOX,EAAOY,wBACpBf,EAAUI,QAAQ7D,MAAMzB,EAAI+F,EAAEG,QAAUF,EAAKG,KAC7CjB,EAAUI,QAAQ7D,MAAMxB,EAAI8F,EAAEK,QAAUJ,EAAKK,GAAG,EAG9CC,EAAmBA,KACrBpB,EAAUI,QAAQ7D,MAAMzB,EAAI,KAC5BkF,EAAUI,QAAQ7D,MAAMxB,EAAI,IAAI,EAGpCoF,EAAOkB,iBAAiB,YAAaT,GACrCT,EAAOkB,iBAAiB,aAAcD,GAEtC,MAAME,EAAeA,KACjBnB,EAAO3B,MAAQgC,OAAOC,WACtBN,EAAOP,OAASY,OAAOE,YACvBV,EAAUI,QAAQT,OAAOQ,EAAO3B,MAAO2B,EAAOP,QAC9CI,EAAUI,QAAQ/C,SAASC,EAAK,EAEpCkD,OAAOa,iBAAiB,SAAUC,GAElC,MAAMC,EAAUA,KACZlB,EAAInB,UAAU,EAAG,EAAGiB,EAAO3B,MAAO2B,EAAOP,QAEzCI,EAAUI,QAAQX,SAClBQ,EAAiBG,QAAUoB,sBAAsBD,EAAQ,EAI7D,OAFAA,IAEO,KACHpB,EAAOsB,oBAAoB,YAAab,GACxCT,EAAOsB,oBAAoB,aAAcL,GACzCZ,OAAOiB,oBAAoB,SAAUH,GACrCI,qBAAqBzB,EAAiBG,QAAQ,CACjD,GACF,CAAC9C,KAEGqE,EAAAA,EAAAA,KAAA,UAAQC,IAAK9B,EAAW+B,MAAO,CAAEC,WAAY,UAAa,C,sFCpDrE,MAAMC,EAAmBC,EAAAA,MAAW,IAAM,wCA4C1C,EA1C4BnC,IAAe,IAAd,KAAEvC,GAAMuC,EACjC,MAAOoC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAAerC,EAAAA,EAAAA,QAAO,MACtBlD,EAAWwF,EAAAA,GAAW,GAAK,IAC3BvF,EAASuF,EAAAA,GAAW,EAAI,EA2B9B,OAzBAnC,EAAAA,EAAAA,YAAU,KACN,MAAMoC,EAAW,IAAIC,sBACjBC,IAAc,IAAZC,GAAMD,EACAC,EAAMC,iBACNR,GAAa,GACbI,EAASK,UAAUF,EAAMG,QAC7B,GAEJ,CACIC,UAAW,KAQnB,OAJIT,EAAahC,SACbkC,EAASQ,QAAQV,EAAahC,SAG3B,KACCgC,EAAahC,SACbkC,EAASK,UAAUP,EAAahC,QACpC,CACH,GACF,KAICuB,EAAAA,EAAAA,KAAA,OAAKoB,GAAG,uBAAuBnB,IAAKQ,EAAcP,MAAO,CAAEmB,UAAW,SAAUC,SAC3EhB,IACGN,EAAAA,EAAAA,KAACK,EAAAA,SAAc,CAACkB,UAAUvB,EAAAA,EAAAA,KAAA,OAAAsB,SAAK,eAAiBA,UAC5CtB,EAAAA,EAAAA,KAACI,EAAgB,CAACzE,KAAMA,EAAMT,SAAUA,EAAUC,OAAQA,OAGhE,C","sources":["utility/particle.js","utility/effect.js","component/canvas/ParticleText.jsx","component/layout/ParticleTextWrapper.jsx"],"sourcesContent":["class Particle {\n    constructor(effect, x, y, color) {\n        this.effect = effect;\n        this.x = Math.random() * this.effect.canvasWidth;\n        this.y = 0;\n        this.color = color;\n        this.originX = x;\n        this.originY = y;\n        this.size = this.effect.gap - 1;\n        this.dx = 0;\n        this.dy = 0;\n        this.vx = 0;\n        this.vy = 0;\n        this.force = 0;\n        this.angle = 0;\n        this.distance = 0;\n        this.friction = Math.random() * 0.6 + 0.15;\n        this.ease = Math.random() * 0.1 + 0.005;\n    }\n\n    draw() {\n        this.effect.context.fillStyle = this.color;\n        this.effect.context.fillRect(this.x, this.y, this.size, this.size);\n    }\n\n    update() {\n        if (this.effect.mouse.x !== null && this.effect.mouse.y !== null) {\n            this.dx = this.effect.mouse.x - this.x;\n            this.dy = this.effect.mouse.y - this.y;\n            this.distance = this.dx * this.dx + this.dy * this.dy;\n            this.force = -this.effect.mouse.radius / this.distance;\n\n            if (this.distance < this.effect.mouse.radius && this.distance > 20) {\n                this.angle = Math.atan2(this.dy, this.dx);\n                this.vx += this.force * Math.cos(this.angle);\n                this.vy += this.force * Math.sin(this.angle);\n            }\n        }\n\n        this.x += (this.vx *= this.friction) + (this.originX - this.x) * this.ease;\n        this.y += (this.vy *= this.friction) + (this.originY - this.y) * this.ease;\n    }\n}\n\nexport default Particle;\n","import Particle from './particle';\n\nclass Effect {\n    constructor(context, canvasWidth, canvasHeight, fontSize, pixGap) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.textX = this.canvasWidth / 2;\n        this.textY = this.canvasHeight / 2;\n        this.fontSize = fontSize;\n        this.lineHeight = this.fontSize * 1.1;\n        this.maxTextWidth = this.canvasWidth * 0.8;\n        this.verticalOffset = 0;\n\n        this.particles = [];\n        this.gap = pixGap;\n        this.mouse = {\n            radius: 20000,\n            x: null,\n            y: null,\n        };\n    }\n\n    wrapText(text) {\n        const gradient = this.context.createLinearGradient(0, 0, this.canvasWidth, this.canvasHeight);\n        gradient.addColorStop(0.3, 'red');\n        gradient.addColorStop(0.5, 'magenta');\n        gradient.addColorStop(0.7, 'yellow');\n        this.context.fillStyle = gradient;\n        this.context.textAlign = 'center';\n        this.context.textBaseline = 'middle';\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = 'orange';\n        this.context.font = this.fontSize + 'px Helvetica';\n\n        let linesArray = [];\n        let words = text.split(' ');\n        let lineCounter = 0;\n        let line = '';\n\n        for (let i = 0; i < words.length; i++) {\n            let testLine = line + words[i] + ' ';\n            if (this.context.measureText(testLine).width > this.maxTextWidth) {\n                line = words[i] + ' ';\n                lineCounter++;\n            } else {\n                line = testLine;\n            }\n            linesArray[lineCounter] = line;\n        }\n\n        let textHeight = this.lineHeight * lineCounter;\n        this.textY = this.canvasHeight / 2 - textHeight / 2 + this.verticalOffset;\n        linesArray.forEach((el, index) => {\n            this.context.fillText(el, this.textX, this.textY + index * this.lineHeight);\n        });\n        this.convertToParticles();\n    }\n\n    convertToParticles() {\n        this.particles = [];\n        const pixels = this.context.getImageData(0, 0, this.canvasWidth, this.canvasHeight).data;\n        this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        for (let y = 0; y < this.canvasHeight; y += this.gap) {\n            for (let x = 0; x < this.canvasWidth; x += this.gap) {\n                const index = (y * this.canvasWidth + x) * 4;\n                const alpha = pixels[index + 3];\n                if (alpha > 0) {\n                    const red = pixels[index];\n                    const green = pixels[index + 1];\n                    const blue = pixels[index + 2];\n                    const color = `rgb(${red},${green},${blue})`;\n                    this.particles.push(new Particle(this, x, y, color));\n                }\n            }\n        }\n    }\n\n    render() {\n        this.particles.forEach((particle) => {\n            particle.draw();\n            particle.update();\n        });\n    }\n\n    resize(width, height) {\n        this.canvasWidth = width;\n        this.canvasHeight = height;\n        this.textX = this.canvasWidth / 2;\n        this.textY = this.canvasHeight / 2;\n        this.maxTextWidth = this.canvasWidth * 0.8;\n    }\n}\n\nexport default Effect;\n","import React, { useEffect, useRef } from 'react';\nimport Effect from '../../utility/effect';\n\nconst ParticleText = ({ text, fontSize, pixGap}) => {\n    const canvasRef = useRef(null);\n    const effectRef = useRef(null);\n    const animationFrameId = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d', { willReadFrequently: true });\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        // 初始化效果\n        effectRef.current = new Effect(ctx, canvas.width, canvas.height, fontSize, pixGap);\n        effectRef.current.wrapText(text);\n\n        const handleMouseMove = (e) => {\n            const rect = canvas.getBoundingClientRect();\n            effectRef.current.mouse.x = e.clientX - rect.left;\n            effectRef.current.mouse.y = e.clientY - rect.top;\n        };\n\n        const handleMouseLeave = () => {\n            effectRef.current.mouse.x = null;\n            effectRef.current.mouse.y = null;\n        };\n\n        canvas.addEventListener('mousemove', handleMouseMove);\n        canvas.addEventListener('mouseleave', handleMouseLeave);\n\n        const handleResize = () => {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n            effectRef.current.resize(canvas.width, canvas.height);\n            effectRef.current.wrapText(text);\n        };\n        window.addEventListener('resize', handleResize);\n\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            effectRef.current.render();\n            animationFrameId.current = requestAnimationFrame(animate);\n        };\n        animate();\n\n        return () => {\n            canvas.removeEventListener('mousemove', handleMouseMove);\n            canvas.removeEventListener('mouseleave', handleMouseLeave);\n            window.removeEventListener('resize', handleResize);\n            cancelAnimationFrame(animationFrameId.current);\n        };\n    }, [text]);\n\n    return <canvas ref={canvasRef} style={{ background: 'black' }} />;\n};\n\nexport default ParticleText;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport ParticleText from \"../canvas/ParticleText\";\nimport { isMobile } from \"react-device-detect\";\n\nconst LazyParticleText = React.lazy(() => import(\"../canvas/ParticleText.jsx\"));\n\nconst ParticleTextWrapper = ({ text }) => {\n    const [isVisible, setIsVisible] = useState(false);\n    const containerRef = useRef(null);\n    const fontSize = isMobile ? 60 : 160;\n    const pixGap = isMobile ? 5 : 7;\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    setIsVisible(true);\n                    observer.unobserve(entry.target);\n                }\n            },\n            {\n                threshold: 0.1,\n            }\n        );\n\n        if (containerRef.current) {\n            observer.observe(containerRef.current);\n        }\n\n        return () => {\n            if (containerRef.current) {\n                observer.unobserve(containerRef.current);\n            }\n        };\n    }, []);\n\n\n    return (\n        <div id=\"ParticleText-Warpper\" ref={containerRef} style={{ minHeight: \"100vh\" }}>\n            {isVisible && (\n                <React.Suspense fallback={<div>Loading...</div>}>\n                    <LazyParticleText text={text} fontSize={fontSize} pixGap={pixGap}/>\n                </React.Suspense>\n            )}\n        </div>\n    );\n};\n\nexport default ParticleTextWrapper;\n"],"names":["constructor","effect","x","y","color","this","Math","random","canvasWidth","originX","originY","size","gap","dx","dy","vx","vy","force","angle","distance","friction","ease","draw","context","fillStyle","fillRect","update","mouse","radius","atan2","cos","sin","canvasHeight","fontSize","pixGap","textX","textY","lineHeight","maxTextWidth","verticalOffset","particles","wrapText","text","gradient","createLinearGradient","addColorStop","textAlign","textBaseline","lineWidth","strokeStyle","font","linesArray","words","split","lineCounter","line","i","length","testLine","measureText","width","textHeight","forEach","el","index","fillText","convertToParticles","pixels","getImageData","data","clearRect","red","green","blue","concat","push","Particle","render","particle","resize","height","_ref","canvasRef","useRef","effectRef","animationFrameId","useEffect","canvas","current","ctx","getContext","willReadFrequently","window","innerWidth","innerHeight","Effect","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseLeave","addEventListener","handleResize","animate","requestAnimationFrame","removeEventListener","cancelAnimationFrame","_jsx","ref","style","background","LazyParticleText","React","isVisible","setIsVisible","useState","containerRef","isMobile","observer","IntersectionObserver","_ref2","entry","isIntersecting","unobserve","target","threshold","observe","id","minHeight","children","fallback"],"sourceRoot":""}